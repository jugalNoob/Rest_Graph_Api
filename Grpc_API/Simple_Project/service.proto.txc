// simpel code 

syntax = "proto3";

// UserService: Service to handle user creation
service UserService {
  rpc CreateUser (UserRequest) returns (UserResponse);
}

message UserRequest {
  string name = 1;
  string email = 2;
  string password = 3;
}

message UserResponse {
  string message = 1;
}




// MyService: Service to send a simple "Hello" message
//service MyService {
  rpc GetHello (HelloRequest) returns (HelloResponse);
}

message HelloRequest {
  // No data is required for the GetHello RPC (No parameters)
}

message HelloResponse {
  string message = 1;  // Message to return (e.g., "Hello world")
}



// get api --- >> ---------------------------------

syntax = "proto3";

service MyService {
  rpc GetHello (HelloRequest) returns (HelloResponse);
}

message HelloRequest {
  // Empty input
}

message Album {
  int32 userId = 1;
  int32 id = 2;
  string title = 3;
}

message HelloResponse {
  repeated Album albums = 1;
}




const getHello = async (call, callback) => {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/albums');
      const albums = await response.json();
  
      const topAlbums = albums.slice(0, 50).map(album => ({
        userId: album.userId,
        id: album.id,
        title: album.title,
      }));
  
      // Must return exactly what's defined in HelloResponse
      callback(null, { albums: topAlbums });
    } catch (error) {
      console.error("Error in getHello:", error);
      callback({
        code: grpc.status.UNKNOWN,
        message: "Internal server error: " + error.message
      });
    }
  };
  



// Create a gRPC server and add both services
const server = new grpc.Server();
// server.addService(userService.service, { CreateUser: createUser });
server.addService(myService.service, { GetHello: getHello });